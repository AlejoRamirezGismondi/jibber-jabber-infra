version: "3.8"

volumes:
  userdata:
  postdata:

services:
  user-db:
    container_name: docker-database-user
    image: postgres:12
    restart: always
    env_file:
      - .env.production
    volumes:
      - userdata:/var/lib/postgresql/data

  post-db:
    container_name: docker-database-post
    image: postgres:12
    restart: always
    env_file:
      - .env.production
    volumes:
      - postdata:/var/lib/postgresql/data

  api-user-jj:
    container_name: api-user-jj
    image: docker.pkg.github.com/alejoramirezgismondi/jibber-jabber-user/user-dev:latest
    entrypoint: ["java", "-jar", "-Dspring.profiles.active=production","/app/spring-boot-application.jar"]
    env_file:
      - .env.production
    depends_on:
      - user-db

  api-post-jj:
    container_name: api-post-jj
    image: docker.pkg.github.com/alejoramirezgismondi/jibber-jabber-post/post-dev:latest
    entrypoint: ["java", "-jar", "-Dspring.profiles.active=production","/app/spring-boot-application.jar"]
    env_file:
      - .env.production
    depends_on:
      - post-db

  web-jj:
    container_name: web-jj
    image: docker.pkg.github.com/alejoramirezgismondi/jibber-jabber-web/web-dev:latest

  reverse-proxy:
    container_name: "jibber-jabber-reverse-proxy"
    image: nginx:1.15-alpine
    depends_on:
      web-jj:
        condition: service_started
      api-user-jj:
        condition: service_started
      api-post-jj:
        condition: service_started
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./.nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
